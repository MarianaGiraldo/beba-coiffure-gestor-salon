version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: salon_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: mydb
      MYSQL_USER: salon_user
      MYSQL_PASSWORD: salon_password_456
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./src/sql:/docker-entrypoint-initdb.d:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    networks:
      - salon_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Go Backend API
  backend:
    build:
      context: ./src
      dockerfile: ../docker/backend/Dockerfile
    container_name: salon_backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: salon_user
      DB_PASSWORD: salon_password_456
      DB_NAME: mydb
      
      # Server Configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      FRONTEND_URL: http://localhost:5173
      
      # JWT Configuration
      JWT_SECRET: your_super_secret_jwt_key_here_change_in_production
      JWT_EXPIRES_IN: 24h
      
      # Environment
      GIN_MODE: release
    ports:
      - "8080:8080"
    volumes:
      - ./src:/app
      - go_modules:/go/pkg/mod
    networks:
      - salon_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: salon_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:8080
      VITE_NODE_ENV: production
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - salon_network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: salon_nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - salon_network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  go_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  salon_network:
    driver: bridge
